@using Huachin.MusicStore.Dto.Request.Generos
@using Huachin.MusicStore.Dto.Response.Generos
@using Huachin.MusicStore.Servicio.Interfaces
@using Huachin.MusicStore.UI.Components.Pages.Mantenimientos.Generos.Componentes
@using Huachin.MusicStore.UI.Components.Shared
@using Huachin.MusicStore.UI.ConfigRutas
@attribute [Authorize(Roles = "Administrador")]
@attribute [Route(Rutas.EditarGenerosNav)]
@inject NavigationManager NavigationManager
@inject IGenreServicio GenreServicio
@inject IToastService toastService;

<h3>Editar Cliente</h3>

<GroupBox Titulo="Datos del Cliente" Class="mt-4">
	<ChildContent>
		<FormGenero GenreRequest="GenreRequest" OnGuardarEvent="OnGuardar"></FormGenero>
	</ChildContent>
</GroupBox>

<Loading IsLoading="IsLoading" />

@code {
	[Parameter]
	public int id { get; set; }

	public GenreRequestDto GenreRequest { get; set; } = new GenreRequestDto();

	public GenreResponseDto GenreResponse { get; set; } = new GenreResponseDto();

	public bool IsLoading { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await ObtenerPorId();
	}

	public async Task OnGuardar()
	{
		IsLoading = true;

		try
		{
			var resultado = await GenreServicio.UpdateAsync(id, GenreRequest);
			if (resultado != null && resultado.Success)
			{
				toastService.ShowSuccess("Genero actualizado correctamente");
				NavigationManager.NavigateTo(Rutas.ListarGeneros);
			}
		}
		catch (Exception)
		{
			toastService.ShowError("Ocurrió un error al registrar el cliente");
			throw;
		}
		finally
		{
			IsLoading = false;
		}
	}

	public async Task ObtenerPorId()
	{
		IsLoading = true;
		try
		{
			var resultado = await GenreServicio.GetAsyn(id);

			if (resultado != null && resultado.Data != null)
			{
				GenreResponse = resultado.Data;
				GenreRequest = new()
				{
					Name = GenreResponse.Name,
					Estado = GenreResponse.Status,
				};
			}
		}
		catch (Exception ex)
		{
			toastService.ShowError("Ocurrió un error al obtener el cliente: " + ex.Message);
		}
		finally
		{
			IsLoading = false;
		}
	}
}
